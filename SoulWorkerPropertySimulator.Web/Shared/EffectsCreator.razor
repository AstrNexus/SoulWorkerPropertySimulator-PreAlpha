@using SoulWorkerPropertySimulator.Models

<div class="@(IsFlex ? "d-flex" : "")">
    <CascadingValue Name="Parents" Value="this" IsFixed="true">
        @if (Count == Contexts.Count)
        {
            @foreach (var item in Contexts)
            {
                <EffectPicker Options="new[] {item}" DefaultEffect="_defaultEffects?.FirstOrDefault()"/>
            }
        }
        else
        {
            @for (var i = 0; i < Count; i++)
            {
                <EffectPicker Key="i" Options="Contexts" DefaultEffect="_defaultEffects?.Count > i ? _defaultEffects[i] : null"/>
            }
        }
    </CascadingValue>
</div>

@code {

    [Parameter]
    public EventCallback NotifyUpdate { get; set; }

    [Parameter]
    public Blueprint Blueprint { get; set; } = null!;

    [Parameter]
    public bool IsFlex { get; set; }

    private IReadOnlyList<Effect>? _defaultEffects;

    [Parameter]
    public IReadOnlyCollection<Effect>? DefaultEffects
    {
        get => _defaultEffects;
        set => _defaultEffects = value?.ToList();
    }

    public ICollection<EffectPicker> Pickers { get; } = new List<EffectPicker>();

    private int Count => Blueprint.RandomEffectCount;
    private IReadOnlyCollection<EffectRandomContext> Contexts => Blueprint.RandomEffects;
    public IReadOnlyCollection<Effect> Effects => Pickers.Select(x => x.Effect).Where(x => x != null).ToList()!;

    // private IReadOnlyCollection<EffectRandomContext> this[int key] => Pickers.Where(x => x.Key.HasValue && x.Key != key && x.Effect != null).Select(x => x.SelectedContext).ToList()!;

    public bool IsDisableContext(EffectPicker self, EffectRandomContext context) => Pickers.Where(x => x != self).Select(x => x.SelectedContext).Contains(context);

    public void RefreshOther(EffectPicker self)
    {
        foreach (var i in Pickers.Where(x => x != self)) { i.Refresh(); }
    }

}