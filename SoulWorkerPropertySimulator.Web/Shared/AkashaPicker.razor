@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Models
@inject IDataProvideService Data
@inject IAkashaComputeService AkashaCompute

<h3>AkashaPicker</h3>

<div>
    <div>
        <select @bind="SelectedName">
            @foreach (var item in Names)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>
    <div>
        <input type="checkbox" @bind="IsSecret"/>
        <label>秘密</label><br>
    </div>
    <div>
        <select @bind="Step">
            @foreach (var step in Steps)
            {
                <option value="@step">+@step</option>
            }
        </select>
    </div>
</div>

@code {
    // [Parameter]
    // public EventCallback<EffectPicker> ReRenderOther { get; set; }

    [Parameter]
    public int Index { get; set; }

    private IReadOnlyCollection<Akasha> _options = null!;

    private IReadOnlyCollection<string> Names => _options.Select(x => x.Name).Distinct().ToList();

    private IReadOnlyCollection<int> Steps => _options.Where(x => x.Name == SelectedName && x.IsSecret == IsSecret).Select(x => x.Step).Distinct().OrderBy(x => x).ToList();

    private string _selectedName = null!;

    private string SelectedName
    {
        get => _selectedName;
        set
        {
            _selectedName = value;
            AkashaCompute.Change(Index, Item);
        }
    }

    private bool _isSecret;

    private bool IsSecret
    {
        get => _isSecret;
        set
        {
            _isSecret = value;
            AkashaCompute.Change(Index, Item);
        }
    }

    private int _step;

    private int Step
    {
        get => _step;
        set
        {
            _step = value;
            AkashaCompute.Change(Index, Item);
        }
    }

    public Akasha? Item => _options.FirstOrDefault(x => x.Name == SelectedName && x.IsSecret == IsSecret && x.Step == Step);

    protected override Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        _options = Data.GetAkashas();

        SelectedName = Names.First();

        return Task.CompletedTask;
    }

}