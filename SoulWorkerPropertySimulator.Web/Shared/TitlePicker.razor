@using SoulWorkerPropertySimulator.Extensions
@using SoulWorkerPropertySimulator.Models
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Types
@inject IDataProvideService Data
@inject ICharacterComputeService CharacterCompute

<div class="input-group mb-3">
    <label class="input-group-text">@Field.GetDescription()</label>
    <select class="form-select" @bind="SelectedHash">
        <option></option>
        @foreach (var item in Options.OrderBy(x => x.Id))
        {
            <option value="@item.GetHashCode()">@item.Id：@item.Name</option>
        }
    </select>
</div>

@code {

    [Parameter]
    public TitleField Field { get; set; }

    [Parameter]
    public Title? DefaultTitle { get; set; }

    private IReadOnlyCollection<Title> Options { get; set; } = null!;

    private int? _selected;

    private int? SelectedHash
    {
        get => _selected;
        set
        {
            _selected = value;
            Update();
        }
    }

    public Title? Item => Options.FirstOrDefault(x => x.GetHashCode() == _selected);

    private void Update()
    {
        var item = Item;
        if (item == null) { CharacterCompute.Clear(Field); }
        else
        { CharacterCompute.Change(item); }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Options = Data.GetTitles(Field);
        if (DefaultTitle != null) { _selected = DefaultTitle.GetHashCode(); }
    }

}