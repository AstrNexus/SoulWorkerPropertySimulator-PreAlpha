@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Models
@inject IDataProvideService Data
@inject ITitleComputeService TitleCompute

<h3>TitlePicker</h3>

<div>
    <div>
        <div>編號</div>
        <div>
            <select @bind="SelectedIndex">
                @foreach (var title in Options)
                {
                    <option value="@title.Index">@title.Index</option>
                }
            </select>
        </div>
    </div>
    <div>
        <div>名稱</div>
        <div>
            <select @bind="SelectedName">
                @foreach (var title in Options)
                {
                    <option value="@title.Index">@title.Name</option>
                }
            </select>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public TitleField Field { get; set; }

    private int? _selectedIndex;
    private string? _selectedName;

    private int? SelectedIndex
    {
        get => _selectedIndex;
        set
        {
            _selectedIndex = value;
            _selectedName = value == null ? null : Options.First(x => x.Index == value).Name;
            Update();
        }
    }

    private string? SelectedName
    {
        get => _selectedName;
        set
        {
            _selectedName = value;
            _selectedIndex = value == null ? null : Options.First(x => x.Name == value).Index;
            Update();
        }
    }

    private IReadOnlyCollection<Title> Options => Data.GetTitles(Field);

    private Title? Item => Options.FirstOrDefault(x => x.Index == SelectedIndex);

    private void Update()
    {
        if (Item == null) { TitleCompute.Clear(Field); }
        else
        { TitleCompute.Change(Item); }
    }

}