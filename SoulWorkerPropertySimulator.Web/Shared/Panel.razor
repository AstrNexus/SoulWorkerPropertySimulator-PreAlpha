@using SoulWorkerPropertySimulator.Services
@inject IPanelComputeService PanelCompute

<div>
    @foreach (var (context, value) in _effects.Where(x => x.Value != 0))
    {
        <div>
            <div>@context.Description:</div>
            <div>@(context.IsPercent ? $"{value * 100}%" : (int) value)</div>
        </div>
    }
</div>

@code {
    private IDictionary<EffectContext, decimal> _effects = null!;

    public void Update(EffectContext context, decimal value)
    {
        if (!_effects.ContainsKey(context)) { _effects.Add(context, value); }
        else
        { _effects[context] = value; }
        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        _effects = PanelCompute.Get();
        PanelCompute.OnChange += Update;

        return Task.CompletedTask;
    }

}