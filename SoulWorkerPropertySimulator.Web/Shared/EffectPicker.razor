@implements IDisposable

<div>
    @if (!_options.Any()) { }
    else
    {
        <div>
            <select @bind="SelectedKey">
                <Virtualize Items="_options" Context="item">
                    <option value="@item.Context.ToString()" disabled="@DisableContext?.Contains(item)">@item.Context.Property.ToString("G")</option>
                </Virtualize>
            </select>
        </div>
    }

    @if (SelectedContext != null)
    {
        @if (SelectedValue < SelectedContext.DisplayMinValue || SelectedValue > SelectedContext.DisplayMinValue) { SelectedValue = SelectedContext.DisplayMaxValue; }

        <div>
            <div>Min: @SelectedContext.Min</div>
            <input type="number" min="@SelectedContext.Min" max="@SelectedContext.Max" @bind="SelectedValue"/>
            <div>Max: @SelectedContext.Max</div>
        </div>
    }
</div>

@code {

    [CascadingParameter(Name = nameof(Parents))]
    public EffectsCreator Parents { get; set; } = null!;

    [Parameter]
    public int? Key { get; set; }

    [Parameter]
    public IReadOnlyCollection<EffectRandomContext> Contexts { get; set; } = new List<EffectRandomContext>();

    [Parameter]
    public EventCallback<EffectPicker> ReRenderOther { get; set; }

    [Parameter]
    public EventCallback NotifyUpdate { get; set; }

    [Parameter]
    public IReadOnlyCollection<EffectRandomContext>? DisableContext { get; set; }

    [Parameter]
    public Effect? DefaultEffect { get; set; }

    private readonly ICollection<EffectRandomContext> _options = new List<EffectRandomContext>();

    private string? _selectedKey;

    private string? SelectedKey
    {
        get => _selectedKey;
        set
        {
            if (_selectedKey == value) { return; }
            _selectedKey = value;
            try { ReRenderOther.InvokeAsync(this); }
            catch (Exception)
            {
    // ignored
            }
            NotifyUpdate.InvokeAsync();
        }
    }

    public EffectRandomContext? SelectedContext => _options.FirstOrDefault(x => x.Context.ToString().Equals(SelectedKey));

    private int _selectedValue;

    private int SelectedValue
    {
        get => _selectedValue;
        set
        {
            if (_selectedValue == value) { return; }
            _selectedValue = value;
            NotifyUpdate.InvokeAsync();
        }
    }

    public Effect? Effect => SelectedContext?.CreateEffect(SelectedValue);

    public void ReRender() => StateHasChanged();

    protected override Task OnParametersSetAsync()
    {
        base.OnParametersSetAsync();

        foreach (var item in _options.Where(x => !Contexts.Contains(x))) { _options.Remove(item); }
        foreach (var item in Contexts.Where(x => !_options.Contains(x))) { _options.Add(item); }

        if (DefaultEffect != null)
        {
            _selectedKey = DefaultEffect.Context.ToString();
            _selectedValue = DefaultEffect.DisplayValue;
        }

        return Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        Parents.Pickers.Add(this);
        return Task.CompletedTask;
    }

    public void Dispose() => Parents.Pickers.Remove(this);
}