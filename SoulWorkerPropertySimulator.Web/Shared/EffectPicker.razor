@using SoulWorkerPropertySimulator.Extensions
@implements IDisposable

<div class="card m-3">
    @if (Options?.Any() ?? false)
    {
        <div class="card-header d-flex align-items-center">
            <div>效果</div>
            <div class="ms-2 flex-grow-1">
                <select class="form-select" @bind="SelectedKey">
                    @if (Options.Count > 1) { <option></option> }
                    @foreach (var item in Options)
                    {
                        <option value="@item.GetHashCode()" disabled="@Parents?.IsDisableContext(this, item)">@item.Context.Property.GetDescription()</option>
                    }
                </select>
            </div>
        </div>
        @if (SelectedContext != null)
        {
            <div class="card-body">
                <div class="form-floating">
                    <input type="number" class="form-control" min="@SelectedContext.DisplayMinValue" max="@SelectedContext.DisplayMaxValue" placeholder="@SelectedContext.DisplayMaxValue" @bind="SelectedValue">
                    @if (SelectedContext.Context.IsPercent)
                    {
                        <label>@SelectedContext.DisplayMinValue% ~ @SelectedContext.DisplayMaxValue%</label>
                        <span class="input-group-text">%</span>
                    }
                    else
                    {
                        <label>@SelectedContext.DisplayMinValue ~ @SelectedContext.DisplayMaxValue</label>
                    }
                </div>
            </div>
        }
    }
</div>

@code {

    private EffectsCreator? _parents;

    [CascadingParameter(Name = nameof(Parents))]
    public EffectsCreator? Parents
    {
        get => _parents;
        set
        {
            _parents?.Pickers.Remove(this);
            _parents = value;
            value?.Pickers.Add(this);
        }
    }

    [Parameter]
    public int? Key { get; set; }


    private IReadOnlyCollection<EffectRandomContext>? _options;

    [Parameter]
    public IReadOnlyCollection<EffectRandomContext>? Options
    {
        get => _options;
        set
        {
            _options = value;
            if (!value?.Contains(SelectedContext) ?? true) { _selectedKey = null; }
        }
    }

    [Parameter]
    public IReadOnlyCollection<EffectRandomContext>? DisableContext { get; set; }

    [Parameter]
    public Effect? DefaultEffect { get; set; }

    private int? _selectedKey;

    public EffectRandomContext? SelectedContext
    {
        get => Options?.FirstOrDefault(x => x.GetHashCode() == SelectedKey);
        set => SelectedKey = value?.GetHashCode();
    }

    private int? SelectedKey
    {
        get => _selectedKey;
        set
        {
            _selectedKey = value;
            SelectedValue = SelectedContext?.DisplayMaxValue;
            Parents?.RefreshOther(this);
        }
    }

    private decimal? _selectedValue;

    public int? SelectedValue
    {
        get => (int?) (SelectedContext == null ? null : SelectedContext.Context.IsPercent ? _selectedValue * 100 : _selectedValue);
        set
        {
            _selectedValue = SelectedContext == null ? null : SelectedContext.Context.IsPercent ? value / 100m : value;
            Parents?.NotifyUpdate.InvokeAsync();
        }
    }

    public Effect? Effect => _selectedValue == null ? null : SelectedContext?.CreateEffect(_selectedValue.Value);

    public void Refresh() => StateHasChanged();

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
        if (DefaultEffect != null)
        {
            _selectedKey = Options?.FirstOrDefault(x => x.Context.Equals(DefaultEffect.Context))?.GetHashCode();
            _selectedValue = DefaultEffect.Value;
            Parents?.RefreshOther(this);
            DefaultEffect = null;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Options != null && Options.Count == 1 && Options.First() != SelectedContext) { SelectedContext = Options.First(); }
    }

    public void Dispose() => Parents?.Pickers.Remove(this);

}