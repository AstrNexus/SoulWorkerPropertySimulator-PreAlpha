@using SoulWorkerPropertySimulator.Extensions
@using SoulWorkerPropertySimulator.Models
@using SoulWorkerPropertySimulator.Services
@using System.Diagnostics
@inject IDataProvideService Data
@inject IBroochesComputeService BroochesCompute

<div class="input-group my-1">
    <label class="input-group-text">@Type.GetDescription()</label>
    <select class="form-select" @bind="Selected">
        <option></option>
        @foreach (var item in Options)
        {
            <option value="@item.DisplayName">@item.DisplayName</option>
        }
    </select>
    @if (Item != null)
    {
        <select class="form-select w-25 flex-grow-0" style="min-width: 5rem; z-index: 1;" @bind="SelectedRare">
            @foreach (var rare in Item.ValidRare.OrderByDescending(x => x))
            {
                <option value="@rare">@rare.GetDescription()</option>
            }
        </select>
    }
</div>


@code {

    [CascadingParameter(Name = nameof(Field))]
    public BroochesField Field { get; set; }

    [Parameter]
    public BroochesType Type { get; set; }

    private IReadOnlyCollection<Brooches> Options { get; set; } = null!;

    private string? _selected;

    private string? Selected
    {
        get => _selected;
        set
        {
            _selected = value;
            SelectedRare = SelectBrooches?.ValidRare.Max();
        }
    }

    private BroochesRare? _selectedRare;

    private BroochesRare? SelectedRare
    {
        get => _selectedRare;
        set
        {
            _selectedRare = value;
            Update();
        }
    }

    private Brooches? SelectBrooches => Options.FirstOrDefault(x => x.DisplayName.Equals(Selected));

    public Brooches? Item
    {
        get
        {
            var item = SelectBrooches;
            return item == null ? null : item with { Rare = SelectedRare!.Value };
        }
    }

    private void Update()
    {
        var item = Item;
        if (item == null) { BroochesCompute.Clear(Field, Type); }
        else
        { BroochesCompute.Change(Field, item); }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Options = Data.GetBrooches(Type).OrderBy(x => x.Series).ThenBy(x => x.Name).ToList();

        var defaultItem = BroochesCompute.Get(Field, Type);
        if (defaultItem != null)
        {
            _selected = defaultItem.DisplayName;
            _selectedRare = defaultItem.Rare;
        }

        Check(Options);
    }

    [Conditional("DEBUG")]
    private static void Check(IReadOnlyCollection<Brooches> option)
    {
        var sd = option.Count(x => x.Series == BroochesSeries.Sd);
        var b = option.Count(x => x.Series == BroochesSeries.Bsk);
        var f = option.Count(x => x.Series == BroochesSeries.Fot);
        var si = option.Count(x => x.Series == BroochesSeries.Sin);
    }

}