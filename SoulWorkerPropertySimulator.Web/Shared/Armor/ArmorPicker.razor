@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Models
@using SoulWorkerPropertySimulator.Web.Shared.Effects
@using SoulWorkerPropertySimulator.Web.Shared.Plugin
@inject IDataProvideService Data
@inject IArmorComputeService ArmorCompute

@if (Options.Any())
{
    <div>
        <select @bind="Selected">
            <option></option>
            @foreach (var item in Options)
            {
                <option value="@item.GetHashCode()">@item.FullName</option>
            }
        </select>
    </div>
    <div>
        <div>品質</div>
        <div>
            <input type="number" min="0" max="100" @bind="SelectedQuality" disabled="@(SelectedBlueprint == null)"/>
        </div>
    </div>
    <div>
        <div>強化 +</div>
        <div>
            <select @bind="SelectedStep" disabled="@(SelectedBlueprint == null || SelectedBlueprint.ValidStep.Count <= 1)">
                @if (SelectedBlueprint == null || !SelectedBlueprint.ValidStep.Any())
                {
                    <option value="0">0</option>
                }
                else
                {
                    @foreach (var i in SelectedBlueprint.ValidStep)
                    {
                        <option value="@i">@i</option>
                    }
                }
            </select>
        </div>
    </div>

    @if (SelectedBlueprint != null)
    {
        <EffectsCreator @ref="_effectsCreator" NotifyUpdate="Update" Blueprint="SelectedBlueprint" DefaultEffects="DefaultArmor?.SelectedEffect"/>

        @if (SelectedBlueprint!.PluginLimit > 0)
        {
            <PluginsCreator @ref="_pluginsCreator"
                             NotifyUpdate="Update"
                             Field="SelectedBlueprint!.Field == ArmorField.Weapon ? PluginField.Weapon : PluginField.Gear"
                             Limit="SelectedBlueprint.PluginLimit"
                             Level="SelectedBlueprint.Level"
                             DefaultPlugins="DefaultArmor?.Plugins"/>
        }
    }

@*         <div> *@
@*             <div> *@
@*                 <select @bind="SelectedTagRares"> *@
@*                     @foreach (var rare in Enum.GetValues<TagRare>().OrderByDescending(x => x)) *@
@*                     { *@
@*                         <option value="@rare">@rare.GetDescription()</option> *@
@*                     } *@
@*                 </select> *@
@*             </div> *@
@*             <div> *@
@*                 <select @bind="SelectedTagName"> *@
@*                     @foreach (var tag in TagOptions) *@
@*                     { *@
@*                         <option value="@tag.Name">@tag.Name</option> *@
@*                     } *@
@*                     $1$ <Virtualize Items="TagOptions" Context="tag"> #1# *@
@*                     $1$     <option value="@tag.Name">@tag.Name</option> #1# *@
@*                     $1$ </Virtualize> #1# *@
@*                 </select> *@
@*             </div> *@
@*         </div> *@
}

@code
{
    [Parameter]
    public ArmorField Field { get; set; }

    [Parameter]
    public Armor? DefaultArmor { get; set; }

    private IReadOnlyCollection<ArmorBlueprint> Options { get; set; } = null!;

    private int? _selected;

    public ArmorBlueprint? SelectedBlueprint
    {
        set => Selected = value?.GetHashCode();
        get => Options.FirstOrDefault(x => x.GetHashCode() == _selected);
    }

    private int? Selected
    {
        get => _selected;
        set
        {
            if (_selected == value) { return; }
            _selected = value;
    // SelectedQuality = 100
    // SelectedStep = SelectedBlueprint?.ValidStep.Max() ?? 0;
            _selectedQuality = 1;
            _selectedStep = SelectedBlueprint?.ValidStep.Max() ?? 0;
            Update();
        }
    }

    private decimal _selectedQuality;

    public int SelectedQuality
    {
        get => (int) (_selectedQuality * 100);
        set
        {
            _selectedQuality = value / 100m;
            if (_notInitializePhase) { Update(); }
        }
    }

    private int _selectedStep;

    public int SelectedStep
    {
        get => _selectedStep;
        set
        {
            _selectedStep = value;
            if (_notInitializePhase) { Update(); }
        }
    }

    private EffectsCreator? _effectsCreator;
    private PluginsCreator? _pluginsCreator;

    private Armor? Item
    {
        get
        {
    // try { return _effectsCreator == null ? null : SelectedBlueprint?.Create(_selectedValue, _effectsCreator.Effects, _pluginsCreator?.Plugins, SelectedTag, SelectedStep); }
            try
            {
                if (_effectsCreator == null) { return null; }

                var item = SelectedBlueprint?.Create(_selectedQuality, _effectsCreator.Effects);
                if (item == null) { return null; }
                return item with {
                    Plugins = _pluginsCreator?.Plugins ?? Array.Empty<Plugin>(),
                    Step = SelectedStep
                    };

    // return _effectsCreator == null ? null : SelectedBlueprint?.Create(_selectedQuality, _effectsCreator.Effects, _pluginsCreator?.Plugins, step: SelectedStep);
            }
            catch (InvalidOperationException) {
                return null;
            }
        }
    }

    private void Update()
    {
        var item = Item;
        if (item == null) { ArmorCompute.Clear(Field); }
        else
        { ArmorCompute.Change(item); }
    }

    private bool _notInitializePhase;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender) { _notInitializePhase = true; }
    }

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();

        Options = Data.GetArmorBlueprints(Field).ToList();

        if (DefaultArmor != null)
        {
            _selected = DefaultArmor.Blueprint.GetHashCode();
            _selectedQuality = DefaultArmor.SelectedRatio;
            _selectedStep = DefaultArmor.Step;

    // _selectedTagRare = DefaultArmor.Tag?.Rare;
    // _selectedTagName = DefaultArmor.Tag?.Name;
        }
    }

    // private string? _selectedKey;
    //
    // private string? SelectedKey
    // {
    //     get => _selectedKey;
    //     set
    //     {
    //         if (_selectedKey == value) { return; }
    //         _selectedKey = value;
    //         Update();
    //     }
    // }
    //
    //
    // private decimal _selectedValue;
    //
    // private int SelectValue
    // {
    //     get => (int) (_selectedValue * 100);
    //     set
    //     {
    //         if (value < 0 || value > 100) { throw new InvalidOperationException(); }
    //         _selectedValue = value / 100m;
    //         Update();
    //     }
    // }
    //
    // private TagRare? _selectedTagRare;
    // private string? _selectedTagName;
    //
    // public int? SelectedTagRares
    // {
    //     get => (int?) _selectedTagRare;
    //     set
    //     {
    //         if (value == null)
    //         {
    //             _selectedTagRare = null;
    //             return;
    //         }
    //
    //         if (!Enum.IsDefined(typeof(TagRare), value)) { throw new InvalidOperationException(); }
    //         _selectedTagRare = (TagRare?) value;
    //         Update();
    //     }
    // }
    //
    // public string? SelectedTagName
    // {
    //     get => _selectedTagName;
    //     set
    //     {
    //         _selectedTagName = value;
    //         Update();
    //     }
    // }
    //
    // private IReadOnlyCollection<Tag> TagOptions => _selectedTagRare != null ? Data.GetTagsD(Field == ArmorField.Weapon ? TagField.Weapon : TagField.Gear, (TagRare) _selectedTagRare) : Array.Empty<Tag>();
    // private Tag? SelectedTag => TagOptions.FirstOrDefault(x => x.Name.Equals(_selectedTagName));
}