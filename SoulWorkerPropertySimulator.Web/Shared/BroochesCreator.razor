@using SoulWorkerPropertySimulator.Services
@inject IBroochesComputeService BroochesCompute
@implements IDisposable

<div>
    @foreach (var field in Enum.GetValues<BroochesField>())
    {
        <div>
            <div>
                <CascadingValue Value="field" Name="Field" IsFixed="true">
                    @foreach (var type in Enum.GetValues<BroochesType>())
                    {
                        <BroochesPicker Type="type"/>
                    }
                </CascadingValue>
            </div>
            <div>
                @if (_set.ContainsKey(field) && _set[field] != null) { <div>_set[field]</div> }
            </div>
        </div>
    }
</div>

@code {
    private readonly Dictionary<BroochesField, string?> _set = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        BroochesCompute.OnSetChange += SetChange;
    }

    public void SetChange(BroochesField field, string? data) { _set[field] = data; }

    public void Dispose() => BroochesCompute.OnSetChange -= SetChange;
}