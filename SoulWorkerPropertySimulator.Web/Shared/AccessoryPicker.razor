@inherits ItemGenerator<SoulWorkerPropertySimulator.Models.Accessory>
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Web.Pages
@using SoulWorkerPropertySimulator.Models
@implements IDisposable
@inject IDataProvideService Data
@inject IAccessoryComputeService AccessoryCompute

<h3>AccessoryPicker</h3>

@if (_options.Any())
{
    <select @bind="SelectedKey">
        <Virtualize Items="_options" Context="item">
            <option value="@item.Name">@item.Name</option>
        </Virtualize>
    </select>

    @if (SelectedBlueprint != null)
    {
        <EffectsCreator Blueprint="SelectedBlueprint" DefaultEffects="DefaultAccessory?.SelectedEffect" NotifyUpdate="Update" @ref="_effectsCreator"/>
    }
}

@code
{
    [CascadingParameter(Name = nameof(Parents))]
    public AccessorySetting Parents { get; set; } = null!;

    [Parameter]
    public AccessoryField Field { get; set; }

    [Parameter]
    public Accessory? DefaultAccessory { get; set; }

    [Parameter]
    public EventCallback<AccessoryField> NotifyUpdate { get; set; }

    private string? _selectedKey;

    private string? SelectedKey
    {
        get => _selectedKey;
        set
        {
            if (_selectedKey == value) { return; }
            _selectedKey = value;
            Update();
        }
    }

    private AccessoryBlueprint? SelectedBlueprint => _options.FirstOrDefault(x => x.Name.Equals(_selectedKey));

    private readonly ICollection<AccessoryBlueprint> _options = new List<AccessoryBlueprint>();

    private EffectsCreator? _effectsCreator;

    public override Accessory? Item => _effectsCreator == null || _effectsCreator.Effects.Count != SelectedBlueprint?.RandomEffectCount ? null : SelectedBlueprint?.Create(_effectsCreator.Effects);

    private void Update() => NotifyUpdate.InvokeAsync(Field);

    protected override Task OnParametersSetAsync()
    {
        base.OnParametersSetAsync();

        var options = Data.GetAccessoryBlueprints(Field).ToList();
        foreach (var item in _options.Where(x => !options.Contains(x))) { _options.Remove(item); }
        foreach (var item in options.Where(x => !_options.Contains(x))) { _options.Add(item); }

        if (DefaultAccessory != null) { _selectedKey = DefaultAccessory.Blueprint.Name; }

        return Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        Parents.Pickers.Add(this);
        return Task.CompletedTask;
    }

    public void Dispose() => Parents.Pickers.Remove(this);
}