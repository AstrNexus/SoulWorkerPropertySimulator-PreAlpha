@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Models.Equipments
@using SoulWorkerPropertySimulator.Models.Plugins
@inject IDataProvideService Data
@inject IEquipmentComputeService EquipmentCompute

<div class="d-flex flex-wrap">
    <CascadingValue Name="Parents" Value="this">
        <CascadingValue Name="Options" Value="Options">
            <CascadingValue Name="Level" Value="EquipmentBlueprint.Level">
                @for (var i = 0; i < EquipmentBlueprint.PluginLimit; i++)
                {
                    <PluginPicker NotifyUpdate="Update" DefaultPlugin="_defaultPlugins?.Count > i ? _defaultPlugins[i] : null"/>
                }
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</div>

@code {

    [Parameter]
    public EquipmentBlueprint EquipmentBlueprint { get; set; } = null!;

    private IReadOnlyList<Plugin>? _defaultPlugins;

    [Parameter]
    public IReadOnlyCollection<Plugin>? DefaultPlugins
    {
        get => _defaultPlugins;
        set
        {
            if (_notInitializePhase || _defaultPlugins != null) { return; }
            _defaultPlugins = value?.ToList();
        }
    }

    public void Update() => EquipmentCompute.Change(EquipmentBlueprint.Field, Plugins);

    public IReadOnlyCollection<PluginBlueprint> Options { get; set; } = new List<PluginBlueprint>();
    public ICollection<PluginPicker> Pickers { get; } = new List<PluginPicker>();
    public IReadOnlyCollection<Plugin> Plugins => Pickers.Select(x => x.Item).Where(x => x != null).ToList()!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Options = Data.GetPluginBlueprints(EquipmentBlueprint.PluginField);
    }

    private bool _notInitializePhase;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender) { _notInitializePhase = true; }
    }

}