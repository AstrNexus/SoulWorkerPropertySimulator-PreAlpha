@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Models
@inject IDataProvideService Data

<h3>PluginCreator</h3>

<CascadingValue Name="Field" Value="Field">
    <CascadingValue Name="Options" Value="Options">
        @for (var i = 0; i < Limit; i++)
        {
            <PluginPicker NotifyUpdate="NotifyUpdate" DefaultPlugin="DefaultPluginList?.Count > i ? DefaultPluginList[i] : null"/>
        }
    </CascadingValue>
</CascadingValue>

@code {

    [Parameter]
    public PluginField Field { get; set; }

    [Parameter]
    public int Limit { get; set; }

    [Parameter]
    public int Level { get; set; } = -1;

    [Parameter]
    public IReadOnlyCollection<Plugin>? DefaultPlugins { get; set; }

    [Parameter]
    public EventCallback NotifyUpdate { get; set; }

    public ICollection<PluginBlueprint> Options { get; set; } = new List<PluginBlueprint>();
    public ICollection<PluginPicker> Pickers { get; } = new List<PluginPicker>();
    private IReadOnlyList<Plugin>? DefaultPluginList => DefaultPlugins?.ToList();
    public IReadOnlyCollection<Plugin> Plugins => Pickers.Select(x => x.Item).Where(x => x != null)!.ToList();

    protected override Task OnParametersSetAsync()
    {
        var old = Level;
        base.OnParametersSetAsync();

        if (old != Level) { Options = Data.GetPluginBlueprints(Field).Where(x => x.Level <= Level).ToList(); }

        return Task.CompletedTask;
    }

}