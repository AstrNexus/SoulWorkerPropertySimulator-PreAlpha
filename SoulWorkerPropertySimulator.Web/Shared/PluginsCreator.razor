@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Types
@using SoulWorkerPropertySimulator.Models.Plugins
@inject IDataProvideService Data

<div class="d-flex flex-wrap">
    <CascadingValue Name="Parents" Value="this">
        <CascadingValue Name="Options" Value="Options">
            <CascadingValue Name="WeaponLevel" Value="WeaponLevel">
                @for (var i = 0; i < Limit; i++)
                {
                    <PluginPicker NotifyUpdate="NotifyUpdate" DefaultPlugin="_defaultPlugins?.Count > i ? _defaultPlugins[i] : null"/>
                }
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</div>

@code {

    [Parameter]
    public PluginField Field { get; set; }

    [Parameter]
    public int Limit { get; set; }


    [Parameter]
    public int WeaponLevel { get; set; }

    // {
    //     get => _level;
    //     set
    //     {
    //         if (_level != value) { Options = Data.GetPluginBlueprints(Field).Where(x => x.Level <= value).ToList(); }
    //     _level = value;
    //     }
    // }

    private IReadOnlyList<Plugin>? _defaultPlugins;

    [Parameter]
    public IReadOnlyCollection<Plugin>? DefaultPlugins
    {
        get => _defaultPlugins;
        set
        {
            if (_notInitializePhase || _defaultPlugins != null) { return; }
            _defaultPlugins = value?.ToList();
        }
    }

    [Parameter]
    public EventCallback NotifyUpdate { get; set; }

    public IReadOnlyCollection<PluginBlueprint> Options { get; set; } = new List<PluginBlueprint>();
    public ICollection<PluginPicker> Pickers { get; } = new List<PluginPicker>();
    public IReadOnlyCollection<Plugin> Plugins => Pickers.Select(x => x.Item).Where(x => x != null).ToList()!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Options = Data.GetPluginBlueprints(Field);
    }

    private bool _notInitializePhase;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender) { _notInitializePhase = true; }
    }

}