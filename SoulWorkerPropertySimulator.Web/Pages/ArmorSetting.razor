@page "/armor"
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Models
@using SoulWorkerPropertySimulator.Web.Services
@using System.Text
@inject IArmorComputeService ArmorCompute
@inject IPageInfoService InfoService
@implements IDisposable

<div>
    @foreach (var field in _fields)
    {
        <ArmorPicker Field="field" DefaultArmor="Default.FirstOrDefault(x => x.Field == field)"/>
    }
</div>

@code {

        private const string First = @"<ul class=""list-group list-group-horizontal list-group-flush justify-content-evenly""><li class=""list-group list-group-horizontal"">";
        private const string Last = "</li></ul>";

    private readonly IReadOnlyCollection<ArmorField> _fields = new[] {ArmorField.Weapon, ArmorField.Head, ArmorField.Shoulder, ArmorField.Chest, ArmorField.Leg};

        public const string Title = "武器與防具";

    private ICollection<Armor> Default { get; set; } = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ArmorCompute.OnSetChange += sets => InfoService.SetBottom(GetSetDescription(sets.OrderBy(x => x.Name).ToList()));
        Default = ArmorCompute.Get().ToList();
        InfoService.SetTitle(Title);
    }

    public void Dispose() => InfoService.SetTitle(null);

    private static string? GetSetDescription(IReadOnlyCollection<ArmorSetEffect> sets)
    {
        if (!sets.Any()) { return null; }
        var builder = new StringBuilder();
        builder.Append(First);
        foreach (var set in sets) { builder.Append($"{set.Name}: {set.Step}件效果"); }
        builder.Append(Last);
        return builder.ToString();
    }

}