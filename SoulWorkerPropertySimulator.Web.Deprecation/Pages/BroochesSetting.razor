@page "/brooches"
@using SoulWorkerPropertySimulator.Extensions
@using SoulWorkerPropertySimulator.Services
@inject IBroochesComputeService BroochesCompute
@inject IDataProvideService DataProvide
@inject IArmorComputeService ArmorCompute

<h3>Brooches</h3>

<div class="d-flex flex-wrap">
    @foreach (var field in Enum.GetValues<BroochesField>())
    {
        <div class="card m-2">
            <div class="card-header text-center">
                @field.GetDescription()
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var type in Enum.GetValues<BroochesType>())
                {
                    <li class="list-group-item d-flex">
                        <BroochesPicker Field="@field" Type="@type"/>
                    </li>
                }
            </ul>
            <div class="card-footer text-center">
                @if (_sets.ContainsKey(field) && _sets[field] != null)
                {
                    <div>@_sets[field]</div>
                }
                else
                { <div>沒有套效</div> }
            </div>
        </div>
    }
</div>

@code {
    private readonly IDictionary<BroochesField, string?> _sets = new Dictionary<BroochesField, string?>();

    protected override Task OnInitializedAsync()
    {
        BroochesCompute.OnSetChange += UpdateSet;

        return base.OnInitializedAsync();
    }

    private void UpdateSet(BroochesField field, string? name) => _sets[field] = name;

}