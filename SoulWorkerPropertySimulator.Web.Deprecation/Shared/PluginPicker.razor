@using SoulWorkerPropertySimulator.Models
@inherits ItemGenerator<SoulWorkerPropertySimulator.Models.Plugin>
<h3>PluginPicker</h3>

@if (Options.Any())
{
    <select @bind="_selectedKey">
        <Virtualize Items="Options" Context="item">
            <option value="@item.Name">@item.Name</option>
        </Virtualize>
    </select>

    @if (SelectedBlueprint != null)
    {
        @if (SelectedBlueprint.ValidStep.Count > 1)
        {
            <div>
                <div>強化</div>
                <select @bind="SelectedStep">
                    @foreach (var i in SelectedBlueprint.ValidStep)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
        }

        @if (SelectedBlueprint.RandomEffectCount > 0)
        {
            <EffectsCreator Blueprintnt="@SelectedBlueprint" NotifyUpdate="NotifyUpdate" DefaultEffects="DefaultPlugin?.Effects" @ref="_effectsCreator"/>
        }
    }
}

@code
{
    [CascadingParameter(Name = nameof(Field))]
    public PluginField Field { get; set; }

    [CascadingParameter(Name = nameof(Options))]
    public ICollection<PluginBlueprint> Options { get; set; } = null!;

    [Parameter]
    public EventCallback NotifyUpdate { get; set; }

    [Parameter]
    public Plugin? DefaultPlugin { get; set; }

    private string? _selectedKey;

    private string? SelectedKey
    {
        get => _selectedKey;
        set
        {
            if (_selectedKey == value) { return; }
            _selectedKey = value;
            NotifyUpdate.InvokeAsync();
        }
    }

    private PluginBlueprint? SelectedBlueprint => Options.FirstOrDefault(x => x.Name.Equals(_selectedKey));

    private int _selectedStep;

    public int SelectedStep
    {
        get => _selectedStep;
        set
        {
            if (SelectedBlueprint == null || !SelectedBlueprint.ValidStep.Contains(value)) { throw new InvalidOperationException(); }
            _selectedStep = value;

            NotifyUpdate.InvokeAsync();
        }
    }

    private EffectsCreator? _effectsCreator;

    public override Plugin? Item
    {
        get
        {
            try { return _effectsCreator == null ? SelectedBlueprint?.Create() : _effectsCreator.Effects.Count != SelectedBlueprint?.RandomEffectCount ? null : SelectedBlueprint?.Create(_effectsCreator?.Effects); }
            catch (InvalidOperationException) {
                return null;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                return null;
            }
        }
    }

    protected override Task OnParametersSetAsync()
    {
        base.OnParametersSetAsync();

        if (DefaultPlugin != null)
        {
            _selectedKey = DefaultPlugin.Blueprint.Name;
            _selectedStep = DefaultPlugin.Step;
        }

        return Task.CompletedTask;
    }
}